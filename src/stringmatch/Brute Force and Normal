without using substring method ?
ChatGPT said:
If you want to check whether s1 exists in s2 without using the substring method, you can manually compare character-by-character.

Updated Code (Without substring)
java
Copy
Edit
public class Karp {

    // Method to check if s1 exists in s2 without using substring()
    boolean match(String s1, String s2) {
        int l = s1.length();
        int n = s2.length();

        for (int i = 0; i <= n - l; i++) { // Ensure within bounds
            int j;
            for (j = 0; j < l; j++) {
                if (s2.charAt(i + j) != s1.charAt(j)) {
                    break; // If a character doesn't match, break inner loop
                }
            }
            if (j == l) { // If all characters matched, return true
                return true;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        String s1 = "kunal";
        String s2 = "Raju kunal ramu";

        // Create an object of Karp
        Karp obj = new Karp();

        // Call match method using the object
        boolean found = obj.match(s1, s2);

        System.out.println("String exists: " + found);
    }
}
Explanation:
Loop through s2, ensuring we don’t go out of bounds (i <= n - l).
Inner loop checks character-by-character for a full match.
If all characters match, j == l, return true.
If no match is found, return false after the loop completes.
Time Complexity:
Worst Case:
𝑂
(
𝑚
×
𝑛
)
O(m×n) (if all characters must be checked)
Best Case:
𝑂
(
𝑛
)
O(n) (if s1 is found early)
Expected Output:
arduino
Copy
Edit
String exists: true
This approach is similar to the Brute Force String Matching Algorithm. 🚀
Let me know if you have any questions! 😊







You said:
what time complexity for the both and how it claculated in simple terms
ChatGPT said:
Time Complexity Analysis for Both Approaches
1️⃣ Using substring() method
java
Copy
Edit
if (s2.substring(i, i + l).equals(s1))
The substring(i, i + l) method takes O(l) time because it extracts l characters.
The .equals(s1) method takes O(l) time for comparison.
The outer loop runs for O(n - l + 1) ≈ O(n) times.
🔹 Total Complexity = O(n) * O(l) = O(n * l) (Quadratic time in the worst case).

2️⃣ Without substring() (Character-by-character comparison)
java
Copy
Edit
for (j = 0; j < l; j++) {
    if (s2.charAt(i + j) != s1.charAt(j)) {
        break;
    }
}
The outer loop runs O(n - l + 1) ≈ O(n) times.
The inner loop compares characters directly, running O(l) times in the worst case.
If a mismatch is found early, the loop breaks, making it faster on average.
🔹 Total Complexity = O(n * l) (Worst case, same as the substring() method).
🔹 Best Case Complexity: O(n) (If s1 is found early).

Comparison in Simple Terms
Approach	Best Case	Worst Case	Explanation
Using substring()	O(n)	O(n * l)	Extracts substring and compares, costly operation.
Without substring()	O(n)	O(n * l)	More efficient due to early break on mismatches.
Which is Better?
✅ Without substring() is generally better because it avoids creating new substrings, saving memory and improving speed slightly.

🚀 Let me know if you need further clarification! 😊