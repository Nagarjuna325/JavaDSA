
A teacher asked u to store 5 roll numbers of a student.
Now your teacher asks u to create a data Structure which stores 5 names. Okay we can create using
 String[] names = new String[5];

A class is a template for an object, and an object is an instance of a class. or

A class is a named group of properties and methods. or

if we want to create our own datatype we use classes. or

A class creates a new data type that can be used to create objects.

When you declare an object of a class, you are creating an instance of that class.(means physical thing of that class)

Thus, a class is a logical construct. An object has physical reality. (That is, an object occupies space in HEAP memory.)

class - logical Construct
object - Physical reality


Objects are characterized by three essential properties: state, identity, and behavior.
The state of an object is a value from its data type. The identity of an object distinguishes one object from another.
It is useful to think of an object’s identity as the place where its value is stored in memory.
The behavior of an object is the effect of data-type operations.

objects is stored in heap memory and reference variable is stored in stack memory.

instance variables means all variables defined inside an object.**

The dot operator links the name of the object with the name of an instance variable.
and instance variables are, which are defined inside the class, but outside the method. **


Although commonly referred to as the dot operator, the formal specification for Java categorizes the . as a separator.

The 'new'  keyword is used for dynamically allocates(that is, allocates at run time)memory for an object & returns a reference to it.
This reference is, more or less, the address in memory of the object allocated by new.
This reference is then stored in the variable.
Thus, in Java, all class objects must be dynamically allocated.

Box mybox; // declare reference to object
     mybox = new Box(); // allocate a Box object
The first line declares mybox as a reference to an object of type Box. At this point, mybox does not yet refer to an
actual object. The next line allocates an object and assigns a reference to it to mybox. After the second line executes,
you can use mybox as if it were a Box object. But in reality, mybox simply holds, in essence, the memory address of the
actual Box object.
The key to Java’s safety is that you cannot manipulate references as you can actual pointers.(in c++, or other languages)
Thus, you cannot cause an object reference to point to an arbitrary memory location or manipulate it like an integer.(means we cannot change the memory address as we dont have access)

A Closer Look at new:
classname class-var = new classname ( );
Here, class-var is a variable of the class type being created. The classname(right side) is the name of the class that is being
instantiated. The class name followed by parentheses specifies the constructor for the class.

A constructor defines what occurs when an object of a class is created.or simply means initilazing the object when it is created.
what we want to do? - and how constructor is helping us in that?
we want to do something like when we create an object to class, we want to initilize all the variables that class has in its template.
This is where constructor is helping us to do.(constructor is a special function or method in the class.)
constructor is a function that runs,  when you create an object and it allocates some variables.
and we want to to bind this arguments with the object.(So that means in before we were doing like kunal.name or kunal.rollno , for attaching
objects with instance variables of the object,so that is we are doing with constructor).

the constructors does not have the return type because the return type of the constructor is same as the class type.

constructor is automatically called once it is defined in the class , when we create an object to the class.


THIS - KEYWORD.

this.name is here "this" replaces with the reference variable of the object.

"this" keyword also helps us to call another constructor from a constructor. **


You might be wondering why you do not need to use new for such things as integers or characters.
The answer is that Java’s primitive types are not implemented as objects.
Rather, they are implemented as “normal” variables.
This is done in the interest of efficiency.

It is important to understand that new allocates memory for an object during run time.

Box b1 = new Box();
Box b2 = b1;
b1 and b2 will both refer to the same object. The assignment of b1 to b2 did not allocate any memory or copy any part
of the original object. It simply makes b2 refer to the same object as does b1. Thus, any changes made to the object
through b2 will affect the object to which b1 is referring, since they are the same object.
When you assign one object reference variable to another object reference variable, you are not creating a copy of the
object, you are only making a copy of the reference.

int square(int i){
    return i * i;
}
A parameter is a variable defined by a method that receives a value when the method is called. For example,
in square( int i), i is a parameter. An argument is a value that is passed to a method when it is invoked.
For example, square(100) passes 100 as an argument. Inside square( ), the parameter i receives that value.

NOTE:
Bus bus = new Bus();
lhs(reference i.e. bus) is looked by compiler & rhs (object i.e. new Bus()) is looked by jvm